from aiogram import Dispatcher, types, Bot
from aiogram.dispatcher import FSMContext, Dispatcher
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import re
from LOLZTEAM.API import Forum, Market

import requests

class Form(StatesGroup):
    waiting_for_text = State()
    waiting_for_second_text = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Ç–µ–∫—Å—Ç–∞



token = "Your Forum Token"
secret = "your secret answer"

market = Market(token=token, language="en")
forum = Forum(token=token, language="en")

async def start(message: types.Message, admin_ids):
    if message.from_user.id in admin_ids:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["üìÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à"] 
        keyboard.add(buttons[0])
        await message.reply(f"–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω!  –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

async def give_command(message: types.Message, admin_ids):
    if message.from_user.id in admin_ids:
        await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à, —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å:")
        await Form.waiting_for_text.set() 

async def process_give(message: types.Message, state: FSMContext):
    first_input = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    await state.update_data(first_input=first_input)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –≤–≤–æ–¥
    await message.reply(f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–æ–∑—ã–≥—Ä—ã—à–∞, —Å—Ä–æ–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞, —Ç–∏–ø —Å—Ä–æ–∫–∞ (minutes, hours, days)\n\n–ü—Ä–∏–º–µ—Ä: 555, 2, hours (–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —Ä–æ–∑—ã–≥—Ä—ã—à –Ω–∞ 555‚ÇΩ, –°—Ä–æ–∫–æ–º 2 —á–∞—Å–∞)")
    await Form.waiting_for_second_text.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Ç–µ–∫—Å—Ç–∞


async def next_give(message: types.Message, state: FSMContext):
    global second_input, price, date, date2, first_input
    second_input = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    price = second_input.split(", ")[0]
    date = second_input.split(", ")[-2]
    date2 = second_input.split(", ")[-1]
    user_data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    first_input = user_data.get('first_input')  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–≤–æ–¥

    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    
    keyboard = InlineKeyboardMarkup()
    approve_button = InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_")
    reject_button = InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_")
    keyboard.add(approve_button, reject_button)
    await message.reply(
        f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {first_input}\nprice: {price}‚ÇΩ\n–°—Ä–æ–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {date} {date2}\n–°–æ–∑–¥–∞–≤–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à?", reply_markup=keyboard
        )

    matc = re.search(r'threads/(\d+)', first_input)
    if matc:
        thread_i = matc.group(1)
        print(f"Forum response data: {thread_i}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        url = f"https://api.zelenka.guru/threads/{thread_i}"

        headers = {"accept": "application/json",
                   "authorization": f"Bearer {token}"}
        response = requests.get(url, headers=headers)
        global title1, body
        title1 = response.json()['thread']['thread_title']
        body = response.json()['thread']['first_post']['post_body']


async def confirm_callback(callback_query: types.CallbackQuery, admin_ids):
    action = callback_query.data
    if action == "approve_":
        try:
            response = forum.threads.contests.money.create_by_time(post_body=body,prize_data_money=int(price), count_winners=1,
                                                                length_value=date, length_option=date2, require_like_count=1,
                                                                require_total_like_count=50, secret_answer=secret, title=title1)
            print(response.json())
            thread_id = response.json()["thread"]["links"]["permalink"]
            await callback_query.message.edit_text(f"–†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω\n{thread_id}")
            if 'errors' in response.json():
                await callback_query.message.edit_text("–û—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ:", response.json()['errors'])
        except NameError as e:
             await callback_query.message.edit_text(f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ {first_input} - —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–º—É")
        except requests.exceptions.HTTPError as http_err:
            await callback_query.message.edit_text(f"HTTP –æ—à–∏–±–∫–∞: {http_err}")
        except requests.exceptions.RequestException as req_err:
            await callback_query.message.edit_text(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {req_err}")
        except Exception as err:
            await callback_query.message.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {err}")
        except ValueError as e:
             await callback_query.message.edit_text(f"–°—É–º–º–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –¢–∞–∫–∂–µ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Ä–æ–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –Ω–µ –±–æ–ª–µ–µ 3-—Ö –¥–Ω–µ–π")
        
    if action == "reject_":
        await callback_query.message.edit_text(f"–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")





def register_handlers(dp: Dispatcher, admin_ids):
    dp.register_message_handler(lambda message, state: process_give(message, state), state=Form.waiting_for_text)
    dp.register_message_handler(lambda message, state: next_give(message, state), state=Form.waiting_for_second_text)
    dp.register_message_handler(lambda message: start(message, admin_ids), commands="start", state="*")
    dp.register_message_handler(lambda message: give_command(message, admin_ids),
                                text="üìÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à")
    dp.register_callback_query_handler(lambda callback_query: confirm_callback(callback_query, admin_ids),
                                       lambda c: c.data.startswith(('approve_', 'reject_')))
