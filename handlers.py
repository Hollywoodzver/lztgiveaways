import math
import re
from aiogram.fsm.context import FSMContext
import requests
from LOLZTEAM.API import Forum, Market
from aiogram import types, F, Router
from aiogram.fsm.state import State, StatesGroup
import asyncio
import config
from config import token, secret
from keyboards import get_main_keyboard, inlinekey
from aiogram.filters import StateFilter, CommandStart
import logging


logging.basicConfig(level=logging.INFO)

router=Router()
admin_ids=config.ADMIN_IDS


class Form(StatesGroup):
    waiting_for_text = State()
    waiting_for_second_text = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Ç–µ–∫—Å—Ç–∞

market = Market(token=token, language="en")
forum = Forum(token=token, language="en")

@router.message(CommandStart())
async def start(message: types.Message):
    if message.from_user.id in admin_ids:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω!  –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())

@router.message(F.text == 'üìÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à')
async def give_command(message: types.Message, state: FSMContext):
    if message.from_user.id in admin_ids:

        await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à, —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å:")
        logging.info(f"Received command: from user {message.from_user.id}")
        await state.set_state(Form.waiting_for_text)

@router.message(StateFilter(Form.waiting_for_text))
async def process_give(message: types.Message, state: FSMContext):
    logging.info(f"Process message in waiting_for_text state: {message.text}")

    first_input = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    pattern = re.search(r'threads/(\d+)', first_input)       
    if pattern:
        await state.update_data(first_input=first_input)
        first_input = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        await state.update_data(first_input=first_input)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –≤–≤–æ–¥
        await message.reply(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–æ–∑—ã–≥—Ä—ã—à–∞, —Å—Ä–æ–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞, —Ç–∏–ø —Å—Ä–æ–∫–∞ (minutes, hours, days)\n–ü—Ä–∏–º–µ—Ä: 555, 2, hours (–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —Ä–æ–∑—ã–≥—Ä—ã—à –Ω–∞ 555‚ÇΩ, –°—Ä–æ–∫–æ–º 2 —á–∞—Å–∞)")
        await state.set_state(Form.waiting_for_second_text) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    else:
        await message.reply(f"–ü–æ—Ö–æ–∂–µ, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞")
        await state.clear()


@router.message(StateFilter(Form.waiting_for_second_text))
async def next_give(message: types.Message, state: FSMContext):
    try:
        second_input = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        parts = [part.strip() for part in second_input.split(",")]
        price = parts[0]
        date = parts[-2]
        date2 = parts[-1]
        user_data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        first_input = user_data.get('first_input')  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–≤–æ–¥
        await state.update_data(second_input=second_input, price=price, date=date, date2=date2)
        if int(price)<500:
            await message.reply("–°—É–º–º–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 500‚ÇΩ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            await state.clear()
        elif date2 not in ('minutes', 'hours', 'days'):
            await message.reply("–¢–∏–ø –¥–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ: minutes, hours, days\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.clear()

        elif int(date)>3 and date2=='days':
            await message.reply('–°—Ä–æ–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ, —á–µ–º 3 days.')
            await state.clear()
        else:           
            await message.reply(
                f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {first_input}\nprice: {price}‚ÇΩ\n–°—Ä–æ–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {date} {date2}\n–°–æ–∑–¥–∞–≤–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à?", reply_markup=inlinekey()
                )

            matc = re.search(r'threads/(\d+)', first_input)
            if matc:
                thread_i = matc.group(1)
                print(f"Forum response data: {thread_i}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
                url = f"https://api.zelenka.guru/threads/{thread_i}"

                headers = {"accept": "application/json",
                        "authorization": f"Bearer {token}"}
                response = requests.get(url, headers=headers)
                title1 = response.json()['thread']['thread_title']
                body = response.json()['thread']['first_post']['post_body']
                response_data=response.json()
                thread_tags = response_data['thread']['thread_tags']

            # –ï—Å–ª–∏ thread_tags —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å, —Ç–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫
            if isinstance(thread_tags, dict):
                thread_tags = list(thread_tags.values())


            else:
            # –ï—Å–ª–∏ –Ω—É–∂–Ω—ã—Ö –∫–ª—é—á–µ–π –Ω–µ—Ç, –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
                thread_tags = []
            await state.update_data(title1=title1, body=body, thread_tags=thread_tags)

    except Exception as e:
        await message.reply(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞")
        await state.clear()

@router.callback_query(F.data.in_({'approve_', 'reject_'}))
async def confirm_callback(callback_query: types.CallbackQuery, state: FSMContext):
    action = callback_query.data
    if action == "approve_":
        try:
            user_data = await state.get_data()
            body = user_data.get('body')
            price = user_data.get('price')
            date = user_data.get('date')
            date2 = user_data.get('date2')
            thread_tags = user_data.get('thread_tags')
            title1 = user_data.get('title1')
            price = int(price)
            like_count = max(200, min(math.floor(price/10), 4000))
            await asyncio.sleep(2)           
            response = forum.threads.contests.money.create_by_time(post_body=body,prize_data_money=int(price), count_winners=1,
                                                                   length_value=date, length_option=date2, require_like_count=1,
                                                                    require_total_like_count=like_count, secret_answer=secret, tags=thread_tags, title=title1)
            print(response.json())
            response_data = response.json()
            thread_id = response.json()["thread"]["links"]["permalink"]
            print(f"–†–æ–∑—ã–≥—Ä—ã—à {thread_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            await callback_query.message.edit_text(f"–†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω\n{thread_id}")
        except Exception as e:
            if 'errors' in response_data:
                errors = '\n'.join(response_data['errors'])
                await callback_query.message.edit_text(f"–û—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ: {errors}")
                await state.clear()
            else:
                await callback_query.message.edit_text(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e}')
                await state.clear()

    if action == "reject_":
        await callback_query.message.edit_text(f"–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        await state.clear()
