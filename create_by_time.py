import re
from aiogram.fsm.context import FSMContext
import requests
from LOLZTEAM.API import Forum, Market
from aiogram import types, F, Router
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter, Command

import asyncio
from config import token, secret
from LOLZTEAM.API import Forum, Market
from keyboards import get_main_keyboard, get_time_keyboard
import config

admin_ids=config.ADMIN_IDS
router_two=Router()
market = Market(token=token, language="en")
forum = Forum(token=token, language="en")

class RepeatForm(StatesGroup):
    waiting_for_interval = State()

class Form(StatesGroup):
    waiting_for_link = State()
    waiting_for_other = State()

tasks = {}
repeat_data = {}  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á

@router_two.message(F.text == 'üìÑ –°–æ–∑–¥–∞–≤–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à –∫–∞–∂–¥—ã–µ X –¥–Ω–µ–π')
async def start_repeat_command(message: types.Message, state: FSMContext):
    if message.from_user.id in admin_ids:

        await message.reply("–£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –¥–Ω—è—Ö, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞:")
        await state.set_state(RepeatForm.waiting_for_interval)

@router_two.message(StateFilter(RepeatForm.waiting_for_interval))
async def process_repeat_interval(message: types.Message, state: FSMContext):
    try:
        global interval_days
        interval_days = int(message.text)
        await state.update_data(interval_days=interval_days)

        await message.reply(f"–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–∂–¥—ã–µ {interval_days} –¥–Ω–µ–π.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à:")
        await state.set_state(Form.waiting_for_link)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        await state.clear()

@router_two.message(StateFilter(Form.waiting_for_link))
async def get_link(message: types.Message, state: FSMContext):
    global link
    link = message.text
    pattern = re.search(r'threads/(\d+)', link)
    
    if pattern:
        await state.update_data(link=link)
        await message.reply(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∏ —Å—Ä–æ–∫:\n–ü—Ä–∏–º–µ—Ä: 555, 2, hours")
        await state.set_state(Form.waiting_for_other)
    else:
        await message.reply("–ü–æ—Ö–æ–∂–µ, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ —Å—Å—ã–ª–∫—É")
        await state.clear()

@router_two.message(StateFilter(Form.waiting_for_other))
async def get_other(message: types.Message, state: FSMContext):
    global dateX, dateY
    try:
        other = message.text  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        parts = [part.strip() for part in other.split(",")]

        global price
        price, dateX, dateY = parts  # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —á–∞—Å—Ç–∏
        await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if int(price)<500:
            await message.reply("–°—É–º–º–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 500‚ÇΩ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        elif dateY not in ('minutes', 'hours', 'days'):
            await message.reply("–¢–∏–ø –¥–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ: minutes, hours, days\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        elif int(dateX)>3 and dateY=='days':
            await message.reply('–°—Ä–æ–∫ —Ä–æ–∑—ã–≥—Ä—à–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ, —á–µ–º 3 days.')
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSMContext
            user_data = await state.get_data()
       # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            await message.reply(
                f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {link}\nprice: {price}‚ÇΩ\n–°—Ä–æ–∫: {dateX} {dateY}\n–°–æ–∑–¥–∞–≤–∞—Ç—å?",
                reply_markup=get_time_keyboard()
            )

            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–µ–º—ã –∏–∑ —Å—Å—ã–ª–∫–∏
            match = re.search(r'threads/(\d+)', link)
            if not match:
                await message.reply("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å ID —Ç–µ–º—ã –∏–∑ —Å—Å—ã–ª–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL.")
                return

            thread_id = match.group(1)
            url = f"https://api.zelenka.guru/threads/{thread_id}"
            headers = {"authorization": f"Bearer {token}"}

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–º–µ
            response = requests.get(url, headers=headers)

            if response.status_code != 200:
                await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {response.status_code}", reply_markup=get_main_keyboard())
                await state.finish
                
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ
            json_data = response.json()

            global body, title
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ
            title = json_data['thread']['thread_title']
            body = json_data['thread']['first_post']['post_body']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É thread_tags
            thread_tags = json_data['thread']['thread_tags']
            global tags
            if isinstance(thread_tags, dict):
                tags = list(thread_tags.values())  # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
            else:
                tags = []  # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–≥–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫

            await state.clear()
    except requests.exceptions.RequestException as req_err:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {req_err}")
        print(req_err)
        await state.finish()
    except ValueError as val_err:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {val_err}")
        print(val_err)
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        print(str(e))
        await state.clear()

@router_two.message(F.text == '–î–∞, —Å–æ–∑–¥–∞–≤–∞—Ç—å')
# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∏ –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
async def da(message: types.Message, user_id=None, state=FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
   
    try:
        await asyncio.sleep(2)
        print(price, body, dateX, dateY, title, tags )
        response = response = forum.threads.contests.money.create_by_time(
            post_body=body, prize_data_money=price,
            count_winners=1, length_value=dateX, length_option=dateY,
            require_like_count=1, require_total_like_count=50, secret_answer=secret,
            tags=tags, title=title
            )
 
        thread_id = response.json()["thread"]["links"]["permalink"]
        await message.reply(f"–†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω\n{thread_id}", reply_markup=get_main_keyboard())
        await schedule_repeating_da(message, admin_ids)
    except Exception as e:
        if 'errors' in response.json():
            await message.reply(response.json()['errors'], reply_markup=get_main_keyboard())
        else:
            await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=get_main_keyboard())

# –ü–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è –∑–∞–¥–∞—á–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ X –¥–Ω–µ–π
async def repeat_da_command(message, admin_ids):
    try:
        user_id = message.from_user.id
        while True:
            await asyncio.sleep(interval_days * 86400)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ –¥–Ω—è—Ö
            await da(message, admin_ids, user_id)  # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    except asyncio.CancelledError:
        await message.reply("–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        return
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=get_main_keyboard())

# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–π—Å—è –∑–∞–¥–∞—á–∏
async def schedule_repeating_da(message: types.Message, admin_ids):
    user_id = message.from_user.id


    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–≤—Ç–æ—Ä—è—é—â—É—é—Å—è –∑–∞–¥–∞—á—É
    task = asyncio.create_task(repeat_da_command(message, admin_ids))
    tasks[user_id] = task
    await message.reply(f"–ö–æ–º–∞–Ω–¥–∞ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ {interval_days} –¥–Ω—è(–µ–π).", reply_markup=get_main_keyboard())


# –û—Ç–º–µ–Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–π—Å—è –∑–∞–¥–∞—á–∏
@router_two.message(Command('/cancel'))
async def cancel_repeating_da(message: types.Message):
    user_id = message.from_user.id

    if user_id in tasks:
        task = tasks[user_id]
        print(task)
        if not task.done():
            task.cancel()  # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É
            await message.reply("–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.",reply_markup=get_main_keyboard())
        else:
            await message.reply("–ó–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=get_main_keyboard())
    else:
        await message.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.", reply_markup=get_main_keyboard())

@router_two.message(F.text == '–ù–µ—Ç')
async def net(message: types.Message, admin_ids):
    await message.reply("–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
