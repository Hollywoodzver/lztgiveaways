import asyncio
import math
import re

import requests
from LOLZTEAM.API import Forum, Market
from aiogram import types, F, Router
from aiogram.filters import StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import config
from config import token, secret
from keyboards import cbtkey

admin_ids=config.ADMIN_IDS
router_two=Router()
market = Market(token=token, language="en")
forum = Forum(token=token, language="en")

class RepeatForm(StatesGroup):
    waiting_for_interval = State()

class Form(StatesGroup):
    waiting_for_link = State()
    waiting_for_other = State()

tasks = {}
repeat_data = {}  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á

@router_two.message(F.text == 'üìÑ –°–æ–∑–¥–∞–≤–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à –∫–∞–∂–¥—ã–µ X –¥–Ω–µ–π')
async def start_repeat_command(message: types.Message, state: FSMContext):
    if message.from_user.id in admin_ids:

        await message.reply("–£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –¥–Ω—è—Ö, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞:")
        await state.set_state(RepeatForm.waiting_for_interval)

@router_two.message(StateFilter(RepeatForm.waiting_for_interval))
async def process_repeat_interval(message: types.Message, state: FSMContext):
    try:

        interval_days = int(message.text)
        await state.update_data(interval_days=interval_days)

        await message.reply(f"–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–∂–¥—ã–µ {interval_days} –¥–Ω–µ–π.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à:")
        await state.set_state(Form.waiting_for_link)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        await state.clear()

@router_two.message(StateFilter(Form.waiting_for_link))
async def get_link(message: types.Message, state: FSMContext):
    link = message.text
    pattern = re.search(r'threads/(\d+)', link)
    if pattern:
        await state.update_data(link=link)
        await message.reply(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–æ–∑—ã–≥—Ä—ã—à–∞, —Å—Ä–æ–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞, —Ç–∏–ø —Å—Ä–æ–∫–∞ (minutes, hours, days)\n–ü—Ä–∏–º–µ—Ä: 555, 2, hours")
        await state.set_state(Form.waiting_for_other)
    else:
        await message.reply("–ü–æ—Ö–æ–∂–µ, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ —Å—Å—ã–ª–∫—É")
        await state.clear()

@router_two.message(StateFilter(Form.waiting_for_other))
async def get_other(message: types.Message, state: FSMContext):
    try:
        other = message.text  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        parts = [part.strip() for part in other.split(",")]
        price, dateX, dateY = parts  # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —á–∞—Å—Ç–∏
        if int(price)<500:
            await message.reply("–°—É–º–º–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 500‚ÇΩ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            await state.clear()
        elif dateY not in ('minutes', 'hours', 'days'):
            await message.reply("–¢–∏–ø –¥–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ: minutes, hours, days\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.clear()
        elif int(dateX)>3 and dateY=='days':
            await message.reply('–°—Ä–æ–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ, —á–µ–º 3 days.')
            await state.clear()
        else:
            await state.update_data(price=price, dateX=dateX, dateY=dateY)
            user_data = await state.get_data()
            link = user_data.get('link')
            await message.reply(
                f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {link}\nprice: {price}‚ÇΩ\n–°—Ä–æ–∫: {dateX} {dateY}\n–°–æ–∑–¥–∞–≤–∞—Ç—å?",
                reply_markup=cbtkey()
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–µ–º—ã –∏–∑ —Å—Å—ã–ª–∫–∏
            match = re.search(r'threads/(\d+)', link)
            if not match:
                await message.reply("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å ID —Ç–µ–º—ã –∏–∑ —Å—Å—ã–ª–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL.")
                return

            thread_id = match.group(1)
            url = f"https://api.zelenka.guru/threads/{thread_id}"
            headers = {"authorization": f"Bearer {token}"}

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–º–µ
            response = requests.get(url, headers=headers)

            if response.status_code != 200:
                await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {response.status_code}")
                await state.clear()
                
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ
            json_data = response.json()       
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ
            title = json_data['thread']['thread_title']
            body = json_data['thread']['first_post']['post_body']
            await state.update_data(title=title, body=body)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É thread_tags
            thread_tags = json_data['thread']['thread_tags']
            if isinstance(thread_tags, dict):
                tags = list(thread_tags.values())  # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
            else:
                tags = []  # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–≥–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            await state.update_data(tags=tags)
    except requests.exceptions.RequestException as req_err:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {req_err}")
        print(req_err)
        await state.clear()
    except ValueError as val_err:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {val_err}")
        await state.clear()
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        print(str(e))
        await state.clear()

@router_two.callback_query(F.data.in_({'cbtapprove_', 'cbtreject_'}))
# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∏ –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
async def da(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    action = callback_query.data
    user_data = await state.get_data()
    title = user_data.get('title')
    body = user_data.get('body')
    price = user_data.get('price')
    dateX = user_data.get('dateX')
    dateY = user_data.get('dateY')
    tags = user_data.get('tags')
    if action=='cbtapprove_':
        try:
            price = int(price)
            like_count = max(200, min(math.floor(price/10), 4000))
            await asyncio.sleep(2)
            print(price, body, dateX, dateY, title, tags )
            response = forum.threads.contests.money.create_by_time(
                post_body=body, prize_data_money=price,
                count_winners=1, length_value=dateX, length_option=dateY,
                require_like_count=1, require_total_like_count=like_count, secret_answer=secret,
                tags=tags, title=title)
            response_data = response.json()
            if 'errors' in response_data:
                error = '\n'.join(response_data['errors'])
                await callback_query.message.edit_text(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{error}')
            else:
                thread_id = response.json()["thread"]["links"]["permalink"]
                print(f"–†–æ–∑—ã–≥—Ä—ã—à {thread_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
                await callback_query.message.edit_text(f"–†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω\n{thread_id}")
                await schedule_repeating_da(admin_ids)          
        except Exception as e:
            await callback_query.message.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    elif action=='cbtreject_':
        await callback_query.message.edit_text("–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")

# –ü–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è –∑–∞–¥–∞—á–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ X –¥–Ω–µ–π
async def repeat_da_command(message, admin_ids, state: FSMContext):
    try:
        user_data = await state.get_data()
        interval_days = user_data.get('interval_days')
        user_id = message.from_user.id
        while True:
            await asyncio.sleep(interval_days * 86400)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ –¥–Ω—è—Ö
            await da(message, admin_ids, user_id)  # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    except asyncio.CancelledError:
        await message.reply("–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        return
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–π—Å—è –∑–∞–¥–∞—á–∏
async def schedule_repeating_da(message: types.Message, admin_ids, state: FSMContext):
    user_id = message.from_user.id
    user_data = await state.get_data()
    interval_days = user_data.get('interval_days')
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–≤—Ç–æ—Ä—è—é—â—É—é—Å—è –∑–∞–¥–∞—á—É
    task = asyncio.create_task(repeat_da_command(message, admin_ids))
    tasks[user_id] = task
    await message.reply(f"–ö–æ–º–∞–Ω–¥–∞ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ {interval_days} –¥–Ω—è(–µ–π).\n–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É - /cancel")

@router_two.message(F.text == '–ù–µ—Ç')
async def net(message: types.Message):
    await message.reply("–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")

# –û—Ç–º–µ–Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–π—Å—è –∑–∞–¥–∞—á–∏
@router_two.message(Command('cancel'))
async def cancel_repeating_da(message: types.Message):
    user_id = message.from_user.id

    if user_id in tasks:
        task = tasks[user_id]
        print(task)
        if not task.done():
            task.cancel()  # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É
            await message.reply("–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        else:
            await message.reply("–ó–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    else:
        await message.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")

@router_two.message(Command('active'))
async def cancel_repeating_da(message: types.Message):
    user_id = message.from_user.id

    if user_id in tasks:
        task = tasks[user_id]
        print(task)
        await message.answer(str(task))

