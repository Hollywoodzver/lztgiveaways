import re
from aiogram.fsm.context import FSMContext
import requests
from LOLZTEAM.API import Forum, Market
from aiogram import types, F, Router
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter, Command
import math
import asyncio
from config import token, secret
from LOLZTEAM.API import Forum, Market
from keyboards import get_main_keyboard, get_time1_keyboard
import config
 
admin_ids=config.ADMIN_IDS
ml=Router()
market = Market(token=token, language="en")
forum = Forum(token=token, language="en")

tasks = {}
repeat_data = {}  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á

class RepeatForm(StatesGroup):
    waiting_for_count = State()

class Form(StatesGroup):
    
    waiting_for_link1 = State()
    waiting_for_other1 = State()

@ml.message(F.text == 'üìÑ –°–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π')
async def many_command(message: types.Message, state: FSMContext):
    if message.from_user.id in admin_ids:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π")
        await state.set_state(RepeatForm.waiting_for_count)

@ml.message(StateFilter(RepeatForm.waiting_for_count))
async def count(message: types.Message, state: FSMContext):
    global count_give
    try:
        count_give = int(message.text)
        await state.update_data(count_give=count_give)

        await message.reply(f"–ö–æ–ª–∏—Å—Ç–≤–æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π - {count_give}\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–º—É, –æ—Ç–∫—É–¥–∞ —Å–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        await state.set_state(Form.waiting_for_link1)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        await state.clear()

@ml.message(StateFilter(Form.waiting_for_link1))
async def link_get(message: types.Message, state: FSMContext):
    global link
    link = message.text
    pattern = re.search(r'threads/(\d+)', link)  
    if pattern:
        await state.update_data(link=link)
        await message.reply(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∏ —Å—Ä–æ–∫:\n–ü—Ä–∏–º–µ—Ä: 555, 2, hours")
        await state.set_state(Form.waiting_for_other1)
    else:
        await message.reply("–ü–æ—Ö–æ–∂–µ, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ —Å—Å—ã–ª–∫—É")
        await state.clear()

@ml.message(StateFilter(Form.waiting_for_other1))
async def other(message: types.Message, state: FSMContext):
    global dateX, dateY, price
    try:
        other = message.text
        parts = [part.strip() for part in other.split(",")]

        price, dateX, dateY = parts
        await state.clear()
        if int(price)<500:
            await message.reply("–°—É–º–º–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 500‚ÇΩ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞")
        elif dateY not in ('minutes', 'hours', 'days'):
            await message.reply("–¢–∏–ø –¥–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ: minutes, hours, days\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        elif int(dateX)>3 and dateX=='days':
            await message.reply("–°—Ä–æ–∫ —Ä–æ–∑—ã–≥—Ä—à–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ, —á–µ–º 3 days.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        else:
            like_count=math.floor(int(price)/10)
            if like_count>2000:
                like_count=2000
            await message.reply(
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π: {count_give}\n–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {link}\nprice: {price}‚ÇΩ\n–°—Ä–æ–∫: {dateX} {dateY}\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∏–º–ø–∞—Ç–∏–π –¥–ª—è —É—á–∞—Å—Ç–∏—è: {like_count}\n–°–æ–∑–¥–∞–≤–∞—Ç—å(–¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å)?",
                reply_markup=get_time1_keyboard()
            )

            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–µ–º—ã –∏–∑ —Å—Å—ã–ª–∫–∏
            match = re.search(r'threads/(\d+)', link)
            if not match:
                await message.reply("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å ID —Ç–µ–º—ã –∏–∑ —Å—Å—ã–ª–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL.", reply_markup=get_main_keyboard())
                return

            thread_id = match.group(1)
            url = f"https://api.zelenka.guru/threads/{thread_id}"
            headers = {"authorization": f"Bearer {token}"}

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–º–µ
            response = requests.get(url, headers=headers)

            if response.status_code != 200:
                await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {response.status_code}", reply_markup=get_main_keyboard())
                await state.clear()
                
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ
            json_data = response.json()

            global body, title
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ
            title = json_data['thread']['thread_title']
            body = json_data['thread']['first_post']['post_body']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É thread_tags
            thread_tags = json_data['thread']['thread_tags']
            global tags
            if isinstance(thread_tags, dict):
                tags = list(thread_tags.values())  # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
            else:
                tags = []  # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–≥–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫

            await state.clear()
    except requests.exceptions.RequestException as req_err:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {req_err}")
        print(req_err)
        await state.finish()
    except ValueError as val_err:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {val_err}")
        print(val_err)
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        print(str(e))
        await state.clear()

@ml.message(F.text == '–î–∞, —Å–æ–∑–¥–∞–≤–∞—Ç—å')
async def da1(message: types.Message):
    response = None
    try:
        count = 0
        await message.reply("–†–æ–∑—ã–≥—Ä—ã—à–∏ —Å–∫–æ—Ä–æ –Ω–∞—á–Ω—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è. –û–∂–∏–¥–∞–π—Ç–µ", reply_markup=get_main_keyboard())
        while count < count_give:
            count += 1
            await asyncio.sleep(62)
            print(f"–¶–µ–Ω–∞: {price},\n–°—Ä–æ–∫: {dateX, dateY},\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title},\n–¢–µ–≥–∏: {tags}")
            response = forum.threads.contests.money.create_by_time(
                post_body=body, prize_data_money=price,
                count_winners=1, length_value=dateX, length_option=dateY,
                require_like_count=1, require_total_like_count=50, secret_answer=secret,
                tags=tags, title=title
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
            if response:
                thread_id = response.json()["thread"]["links"]["permalink"]
                await message.reply(f"–†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω\n{thread_id}\n–û—Å—Ç–∞–ª–æ—Å—å {count_give-count}")
            else:
                await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à: –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π.")
        if count == count_give:
            await message.reply(f"–í—Å–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
            

    except Exception as e:
        if response and response.json().get('errors'):
            await message.reply(response.json()['errors'], reply_markup=get_main_keyboard())
        else:
            await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=get_main_keyboard())



@ml.message(F.text == "–û—Ç–º–µ–Ω–∞")
async def net0(message: types.Message):
    await message.reply("–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())

   