import asyncio
import math
import re

import requests
from LOLZTEAM.API import Forum, Market
from aiogram import types, F, Router
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import config
from config import token, secret
from keyboards import masskey

admin_ids=config.ADMIN_IDS
ml=Router()
market = Market(token=token, language="en")
forum = Forum(token=token, language="en")

tasks = {}
repeat_data = {}  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á

class RepeatForm(StatesGroup):
    waiting_for_count = State()

class Form(StatesGroup):
    
    waiting_for_link1 = State()
    waiting_for_other1 = State()

@ml.message(F.text == 'üìÑ –°–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π')
async def many_command(message: types.Message, state: FSMContext):
    if message.from_user.id in admin_ids:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π")
        await state.set_state(RepeatForm.waiting_for_count)

@ml.message(StateFilter(RepeatForm.waiting_for_count))
async def count(message: types.Message, state: FSMContext):
    try:
        count_give = int(message.text)
        await state.update_data(count_give=count_give)

        await message.reply(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π - {count_give}\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–º—É, –æ—Ç–∫—É–¥–∞ —Å–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        await state.set_state(Form.waiting_for_link1)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        await state.clear()

@ml.message(StateFilter(Form.waiting_for_link1))
async def link_get(message: types.Message, state: FSMContext):
    link = message.text
    pattern = re.search(r'threads/(\d+)', link)  
    if pattern:
        await state.update_data(link=link)
        await message.reply(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–æ–∑—ã–≥—Ä—ã—à–∞, —Å—Ä–æ–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞, —Ç–∏–ø —Å—Ä–æ–∫–∞ (minutes, hours, days)\n–ü—Ä–∏–º–µ—Ä: 555, 2, hours")
        await state.set_state(Form.waiting_for_other1)
    else:
        await message.reply("–ü–æ—Ö–æ–∂–µ, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ —Å—Å—ã–ª–∫—É")
        await state.clear()

@ml.message(StateFilter(Form.waiting_for_other1))
async def other(message: types.Message, state: FSMContext):
  
    try:
        other = message.text
        parts = [part.strip() for part in other.split(",")]

        price, dateX, dateY = parts
        await state.update_data(price=price, dateX=dateX, dateY=dateY)
        if int(price)<500:
            await message.reply("–°—É–º–º–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 500‚ÇΩ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞")
            await state.clear()
        elif dateY not in ('minutes', 'hours', 'days'):
            await message.reply("–¢–∏–ø –¥–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ: minutes, hours, days\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.clear()
        elif int(dateX)>3 and dateX=='days':
            await message.reply("–°—Ä–æ–∫ —Ä–æ–∑—ã–≥—Ä—à–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ, —á–µ–º 3 days.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.clear()
        else:
            price = int(price)
            like_count = max(200, min(math.floor(price/10), 4000))
            user_data = await state.get_data()
            count_give = user_data.get('count_give')
            link = user_data.get('link')

            await message.reply(
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π: {count_give}\n–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {link}\nprice: {price}‚ÇΩ\n–°—Ä–æ–∫: {dateX} {dateY}\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∏–º–ø–∞—Ç–∏–π –¥–ª—è —É—á–∞—Å—Ç–∏—è: {like_count}\n–°–æ–∑–¥–∞–≤–∞—Ç—å(–¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å)?",
                reply_markup=masskey()
            )

            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–µ–º—ã –∏–∑ —Å—Å—ã–ª–∫–∏
            match = re.search(r'threads/(\d+)', link)
            if not match:
                await message.reply("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å ID —Ç–µ–º—ã –∏–∑ —Å—Å—ã–ª–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL.")
                return

            thread_id = match.group(1)
            url = f"https://api.zelenka.guru/threads/{thread_id}"
            headers = {"authorization": f"Bearer {token}"}

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–º–µ
            response = requests.get(url, headers=headers)

            if response.status_code != 200:
                await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {response.status_code}")
                await state.clear()
                
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ
            json_data = response.json()

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ
            title = json_data['thread']['thread_title']
            body = json_data['thread']['first_post']['post_body']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É thread_tags
            thread_tags = json_data['thread']['thread_tags']
            await state.update_data(title=title, body=body)
            if isinstance(thread_tags, dict):
                tags = list(thread_tags.values())  # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
            else:
                tags = []  # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–≥–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            await state.update_data(tags=tags)
    except requests.exceptions.RequestException as req_err:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {req_err}")
        print(req_err)
        await state.clear()
    except ValueError as val_err:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {val_err}")
        print(val_err)
        await state.clear()
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        print(str(e))
        await state.clear()

@ml.callback_query(F.data.in_({'massapprove_', 'massreject_'}))
async def da1(callback_query: types.CallbackQuery, state: FSMContext):
    response = None
    action = callback_query.data
    user_data = await state.get_data()
    body = user_data.get('body')
    price = user_data.get('price')
    dateX = user_data.get('dateX')
    dateY = user_data.get('dateY')
    tags = user_data.get('tags')
    title = user_data.get('title')
    count_give = user_data.get('count_give')
    if action=='massapprove_':
        try:
            like_count = max(200, min(math.floor(price/10), 4000))
            count = 0
            await callback_query.message.edit_text("–†–æ–∑—ã–≥—Ä—ã—à–∏ —Å–∫–æ—Ä–æ –Ω–∞—á–Ω—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è. –û–∂–∏–¥–∞–π—Ç–µ")
            while count < count_give:
                count += 1
                await asyncio.sleep(62)
                print(f"–¶–µ–Ω–∞: {price},\n–°—Ä–æ–∫: {dateX, dateY},\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title},\n–¢–µ–≥–∏: {tags}")
                response = forum.threads.contests.money.create_by_time(
                post_body=body, prize_data_money=price,
                count_winners=1, length_value=dateX, length_option=dateY,
                require_like_count=1, require_total_like_count=like_count, secret_answer=secret,
                tags=tags, title=title)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
                if response:
                    thread_id = response.json()["thread"]["links"]["permalink"]
                    await callback_query.message.edit_text(f"–†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω\n{thread_id}\n–û—Å—Ç–∞–ª–æ—Å—å {count_give-count}")
                else:
                    await callback_query.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à: –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π.")
            if count == count_give:
                await callback_query.message.edit_text(f"–í—Å–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
            

        except Exception as e:
            if response and response.json().get('errors'):
                await callback_query.message.edit_text(response.json()['errors'])
                await state.clear()
            else:
                await callback_query.message.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                await state.clear()
    elif action=='massreject_':
        await callback_query.message.edit_text(f"–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        await state.clear()


   
