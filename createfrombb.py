import math
import re
from aiogram.fsm.context import FSMContext
import requests
from LOLZTEAM.API import Forum, Market
from aiogram import types, F, Router
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
import asyncio
import config
from config import token, secret
from keyboards import bbkey
from aiogram.filters import StateFilter, CommandStart
import logging


logging.basicConfig(level=logging.INFO)

r=Router()
admin_ids=config.ADMIN_IDS


class Form(StatesGroup):
    waiting_for_name = State()
    waiting_for_bbcode = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    waiting_for_prices = State()

market = Market(token=token, language="en")
forum = Forum(token=token, language="en")

@r.message(F.text=="üìÑ –°–æ–∑–¥–∞—Ç—å –∏–∑ bb-code")
async def first(message: types.Message, state: FSMContext):
    if message.from_user.id in admin_ids:
        await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞")
        await state.set_state(Form.waiting_for_name)

@r.message(StateFilter(Form.waiting_for_name))
async def name(message: types.Message, state: FSMContext):
    name = message.text
    await state.update_data(name=name)
    await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ bb-code —Ä–æ–∑—ã–≥—Ä—ã—à–∞(–≤ –Ω–µ–º –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞–∫—Å–∏–º—É–º 2 —Ñ–æ—Ç–æ)")
    await state.set_state(Form.waiting_for_bbcode)

@r.message(StateFilter(Form.waiting_for_bbcode))
async def bbcode(message: types.Message, state: FSMContext):
    bbcode=message.text
    await state.update_data(bbcode=bbcode)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–æ–∑—ã–≥—Ä—ã—à–∞, —Å—Ä–æ–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞, —Ç–∏–ø —Å—Ä–æ–∫–∞ (minutes, hours, days)\n\n–ü—Ä–∏–º–µ—Ä: 555, 2, hours (–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —Ä–æ–∑—ã–≥—Ä—ã—à –Ω–∞ 555‚ÇΩ, –°—Ä–æ–∫–æ–º 2 —á–∞—Å–∞)")
    await state.set_state(Form.waiting_for_prices)

@r.message(StateFilter(Form.waiting_for_prices))
async def prices(message: types.Message, state: FSMContext):
    prices_input = message.text
    try:
        parts = [part.strip() for part in prices_input.split(",")]
        price = parts[0]
        date = parts[-2]
        date2 = parts[-1]
        await state.update_data(price=price, date=date, date2=date2)
        user_data = await state.get_data()
        name = user_data.get('name')
        bbcode = user_data.get('bbcode')
        if isinstance(price, str) and not price.isdigit():
            await message.reply("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞")
            await state.clear()
        elif int(price)<500:
            await message.reply("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ - 500 —Ä—É–±–ª–µ–π.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞")
            await state.clear()
        elif date2 not in ('minutes', 'hours', 'days'):
            await message.reply('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: "minutes", "hours", "days".\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞')
            await state.clear()
        elif int(date) > 3 and date2=="days":
            await message.reply("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 3 days.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞")
            await state.clear()
        else:
            await message.reply(
                    f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: <pre><code>{name}</code></pre>\n–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: <pre><code>{bbcode}</code></pre>price: {price}‚ÇΩ\n–°—Ä–æ–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {date} {date2}\n–°–æ–∑–¥–∞–≤–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à?", parse_mode=ParseMode.HTML, reply_markup=bbkey()
                    )
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞")
        await state.clear()
    
@r.callback_query(F.data.in_({'bbapprove_', 'bbreject_'}))
async def bconf(callback_query: types.CallbackQuery, state: FSMContext):
    action = callback_query.data
    user_data = await state.get_data()
    price = user_data.get('price')
    body = user_data.get('bbcode')
    date = user_data.get('date')
    date2 = user_data.get('date2')
    title1 = user_data.get('name')
    if action=='bbapprove_':
        try:
            await asyncio.sleep(2)
            like_count = max(200, min(math.floor(price/10), 4000))
            response = forum.threads.contests.money.create_by_time(post_body=body,prize_data_money=int(price), count_winners=1,
                                                                length_value=date, length_option=date2, require_like_count=1,
                                                                    require_total_like_count=like_count, secret_answer=secret, title=title1)
            print(response.json())
            response_data = response.json()
            
            thread_id = response.json()["thread"]["links"]["permalink"]
            print(f"–†–æ–∑—ã–≥—Ä—ã—à {thread_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            await callback_query.message.edit_text(f"–†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω\n{thread_id}")
        except Exception as e:
            if 'errors' in response_data:
                errors = '\n'.join(response_data['errors'])
                await callback_query.message.edit_text(f"–û—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ: {errors}")
                await state.clear()
            else:
                await callback_query.message.edit_text(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e}')
                await state.clear()
    elif action=='bbreject_':
        await callback_query.message.edit_text("–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await state.clear()
            


